<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'firstName',
        'lastName',
        'phoneNumber',
        'position_id',
        'role',
        'email',
        'password',
        'address_mail',
        'department_id'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * return true if the user is the resource manager.
     *
     *
     * @return bool
     */
    function is_manager() : bool {
        return $this->role === 'manager';
    }

    /**
     * return true if the user is a simple employee.
     *
     *
     * @return bool
     */
    function is_employee() : bool {
        return $this->role === 'employee';
    }

    /**
     * return true if the user is a supervisor member.
     *
     *
     * @return bool
     */
    function is_supervisor() : bool {
        return $this->role === 'supervisor';
    }

    /**
     * return true if the user is an administration member.
     * @return bool
     */
    function is_admin() : bool {
        return $this->role === 'admin';
    }

    /**
     * return true if the user is the director.
     * @return bool
     */
    function is_director() : bool {
        return $this->role === 'director';
    }

    /**
     * return true if the user is the accountant.
     * @return bool
     */
    function is_accountant() : bool {
        return $this->role === 'accountant';
    }

    /**
     * return true if the user is the super administrator.
     */
    function prospects(): HasMany
    {
        return $this->hasMany('\App\Models\Prospect', 'prospect_id');
    }

    // Returns user's position.
    public function position(): BelongsTo
    {
        return $this->belongsTo('\App\Models\Position', 'position_id');
    }

    // Returns user's department.
    public function department(): BelongsTo
    {
        return $this->belongsTo('\App\Models\Department', 'department_id');
    }

    // Returns user's full name.
    public function fullName(): string
    {
        return $this->firstName.' '.$this->lastName;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        // Generates an employee QR Code after its creation.
        static::created(function($user){
            if ($user->is_employee()) {
                $user->qr_code = '2342423';
                $user->save();
            }
        });
    }
}
